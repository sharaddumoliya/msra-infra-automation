---

- debug:
      msg: "Kubernetes prerequisites and setting up nodes"

- name: Disabling Swap on all nodes
  shell: swapoff -a

- name: Commenting Swap entries in /etc/fstab
  replace:
   path: /etc/fstab
   regexp: '(.*swap*)'
   replace: '\1'

- name: Creating a repository file for Kubernetes
  file:
   path: /etc/yum.repos.d/kubernetes.repo
   state: touch

- name: Adding repository details in Kubernetes repo file.
  blockinfile:
   path: /etc/yum.repos.d/kubernetes.repo
   block: |
    [kubernetes]
    name=Kubernetes
    baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
    enabled=1
    gpgcheck=1
    repo_gpgcheck=1
    gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
      https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg

- name: Installing Docker
  shell: |
   yum install -y yum-utils device-mapper-persistent-data lvm2
   yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
   yum update -y && yum install -y containerd.io-1.2.13 docker-ce-19.03.8 docker-ce-cli-19.03.8

- name: Installing required packages
  yum:
   name: "{{ packages }}"
   state: present

- name: Starting and Enabling the required services
  service:
   name: "{{ item }}"
   state: started
   enabled: yes
  with_items: "{{ services }}"

  - name: starting firewalld services
    service: name=firewalld state=started enabled=yes
    register: service_firewalld_output

  - debug:
     var: service_firewalld_output.state

  - name: Allow Network Ports in Firewalld
    firewalld:
     port: "{{ item }}"
     state: enabled
     permanent: yes
     immediate: yes
    with_items: "{{ ports }}"
    register: port_output

  - debug:
     var: port_output.msg


- name: Enabling Bridge Firewall Rule
  shell: "echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables"

- name: Setup Master node
  block:
  - debug:
      msg: "Master node configuration starts"

  - name: Pulling images required for setting up a Kubernetes cluster
    shell: kubeadm config images pull

  - name: Resetting kubeadm
    shell: kubeadm reset -f
    register: kubeadm_reset_output

  - name: Initializing Kubernetes cluster
    shell: kubeadm init --apiserver-advertise-address {{ad_addr}} --pod-network-cidr={{cidr_v}}
    register: k8_initialize_output

  - name: Copying required files
    shell: |
     mkdir -p $HOME/.kube
     sudo cp -f /etc/kubernetes/admin.conf $HOME/.kube/config
     sudo chown $(id -u):$(id -g) $HOME/.kube/config

  - name: Install Network Add-on
    command: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

  - name: Generate join command
    command: kubeadm token create --print-join-command
    register: join_command

  - name: Copy join command to local file
    local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"

  when: "'master' == node_type"


- name: Setup Worker node
  block:
  - debug:
      msg: "Worker node configuration starts"

  - name: Resetting kubeadm
    shell: kubeadm reset -f
    register: kubeadm_reset_output

  - name: Copy the join command to server location
    copy: src=join-command dest=/tmp/join-command.sh mode=0777

  - name: Join the node to cluster
    command: sh /tmp/join-command.sh

  when: "'worker' == node_type"
