---
##### Update /etc/hosts before running any command/scripts
- debug:
      msg: "Kubernetes prerequisites and setting up nodes"

- name: Disable SELinux
  selinux:
    state: disabled
  register: disable_selinux_status

- debug:
      var: disable_selinux_status

- name: Set SELinux in permissive mode until the machine is rebooted
  command: setenforce 0
  ignore_errors: true
  changed_when: false
  register: set_selinux_status

- debug:
      var: set_selinux_status

- name: Disable Firewall
  shell: |
   systemctl disable firewalld
   systemctl stop firewalld
  register: disable_firewall_status

- debug:
      var: disable_firewall_status

- name: Remove swapfile from /etc/fstab
  mount:
    name: "{{ item }}"
    fstype: swap
    state: absent
  with_items:
    - swap
    - none

- name: Check swap
  command: /sbin/swapon -s
  register: swapon
  changed_when: no

- name: Disable swap
  command: /sbin/swapoff -a
  when: swapon.stdout
  register: disable_swap_status

- debug:
      var: disable_swap_status


- name: Enabling Bridge Firewall Rule and Update sysctl settings for Kubernetes networking
  shell: |
    modprobe br_netfilter
    cat >>/etc/sysctl.d/kubernetes.conf<<EOF
    net.bridge.bridge-nf-call-ip6tables = 1
    net.bridge.bridge-nf-call-iptables = 1
    EOF
    sysctl --system

- name: Creating a repository file for Kubernetes
  file:
   path: /etc/yum.repos.d/kubernetes.repo
   state: touch

- name: Adding repository details in Kubernetes repo file.
  blockinfile:
   path: /etc/yum.repos.d/kubernetes.repo
   block: |
    [kubernetes]
    name=Kubernetes
    baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
    enabled=1
    gpgcheck=1
    repo_gpgcheck=1
    gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
      https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg

- name: Install required packages for Docker
  shell: yum install -y yum-utils device-mapper-persistent-data lvm2

- name: Add the Docker repository
  shell: yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

- name: Install Docker CE
  shell: yum install -y docker-ce

- name: Create /etc/docker
  file:
    path: /etc/docker
    state: directory

- name: Set up the Docker daemon
  shell: |
    cat > /etc/docker/daemon.json <<EOF
    {
      "exec-opts": ["native.cgroupdriver=systemd"],
      "log-driver": "json-file",
      "log-opts": {
        "max-size": "100m"
      },
      "storage-driver": "overlay2",
      "storage-opts": [
        "overlay2.override_kernel_check=true"
      ]
    }
    EOF
    mkdir -p /etc/systemd/system/docker.service.d

- name: Restart docker service
  shell: |
    systemctl daemon-reload
    systemctl restart docker

- name: Installing required k8s packages
  shell: yum install -y kubelet kubeadm kubectl

- name: Starting and Enabling the required services
  shell: systemctl start kubelet && systemctl enable kubelet
  register: k8s_services_output

- debug:
    var: k8s_services_output

- name: Setup Master node
  block:
  - debug:
      msg: "Master node configuration starts"

  - name: Initializing Kubernetes cluster
    shell: kubeadm init --apiserver-advertise-address {{ad_addr}} --pod-network-cidr={{cidr_v}}
    register: k8_initialize_output

  - name: Copying required files
    shell: |
     mkdir -p $HOME/.kube
     cp -f /etc/kubernetes/admin.conf $HOME/.kube/config
     chown $(id -u):$(id -g) $HOME/.kube/config

  - name: Install Network Add-on
    command: kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

  - name: Check status of pods
    command: kubectl wait --for=condition=Ready pods --all --timeout=90s -A
    register: pods_status

  - debug:
      var: pods_status

  - name: Generate join command
    command: kubeadm token create --print-join-command
    register: join_command

  - name: Copy join command to local file
    local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"

  when: "'master' == node_type"


- name: Setup Worker node
  block:
  - debug:
      msg: "Worker node configuration starts"

  - name: Copy the join command to server location
    copy: src=join-command dest=/tmp/join-command.sh mode=0777

  - name: Join the node to cluster
    command: sh /tmp/join-command.sh

  when: "'worker' == node_type"

